<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsk_1_1DummyNetwork" kind="class" language="C++" prot="public" final="yes">
    <compoundname>sk::DummyNetwork</compoundname>
    <basecompoundref refid="classsk_1_1AbstractNetwork" prot="public" virt="non-virtual">sk::AbstractNetwork</basecompoundref>
    <includes refid="dummy__network_8hpp" local="no">dummy_network.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a09ae867375c25632131a2b7708e83b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sk::DummyNetwork::DummyNetwork</definition>
        <argsstring>()=default</argsstring>
        <name>DummyNetwork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="22" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a858d7f6e659e0d2fd95297d8466def44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sk::DummyNetwork::DummyNetwork</definition>
        <argsstring>(DummyNetwork const &amp;)=delete</argsstring>
        <name>DummyNetwork</name>
        <param>
          <type><ref refid="classsk_1_1DummyNetwork" kindref="compound">DummyNetwork</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a9221488b2d5f34713e685423eb975022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sk::DummyNetwork::DummyNetwork</definition>
        <argsstring>(DummyNetwork &amp;&amp;)=delete</argsstring>
        <name>DummyNetwork</name>
        <param>
          <type><ref refid="classsk_1_1DummyNetwork" kindref="compound">DummyNetwork</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a9d07f4d6d0617198957124c757a11321" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>sk::DummyNetwork::~DummyNetwork</definition>
        <argsstring>() noexcept override=default</argsstring>
        <name>~DummyNetwork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="25" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a499259093e0e0826adcdbede89c885c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto sk::DummyNetwork::operator=</definition>
        <argsstring>(DummyNetwork const &amp;) -&gt; DummyNetwork &amp;=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsk_1_1DummyNetwork" kindref="compound">DummyNetwork</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="27" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a6d0543c6bc787cea094fcb03f1404e76" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sk::DummyNetwork::operator=</definition>
        <argsstring>(DummyNetwork &amp;&amp;) noexcept -&gt; DummyNetwork &amp;=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsk_1_1DummyNetwork" kindref="compound">DummyNetwork</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="28" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1DummyNetwork_1a4f79df7ffb2c6b259ca37330d5c05f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>auto</type>
        <definition>auto sk::DummyNetwork::getSocket</definition>
        <argsstring>() -&gt; QTcpSocket *override</argsstring>
        <name>getSocket</name>
        <reimplements refid="classsk_1_1AbstractNetwork_1acbe68d2bf6f60867debb0a88b52f86f2">getSocket</reimplements>
        <briefdescription>
<para>Helper to get current connection. </para>
        </briefdescription>
        <detaileddescription>
<para>If the app was started as a server, this returns the client &apos;connection&apos;, If the app was started as a client, this &apos;returns&apos; the server, otherwise it simply returns nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dummy_network.hpp" line="30" column="10" bodyfile="src/dummy_network.cpp" bodystart="7" bodyend="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implement <ref refid="classsk_1_1AbstractNetwork" kindref="compound">AbstractNetwork</ref> for single-user mode. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QObject</label>
      </node>
      <node id="1">
        <label>sk::DummyNetwork</label>
        <link refid="classsk_1_1DummyNetwork"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>sk::AbstractNetwork</label>
        <link refid="classsk_1_1AbstractNetwork"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QObject</label>
      </node>
      <node id="1">
        <label>sk::DummyNetwork</label>
        <link refid="classsk_1_1DummyNetwork"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>sk::AbstractNetwork</label>
        <link refid="classsk_1_1AbstractNetwork"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dummy_network.hpp" line="19" column="1" bodyfile="src/dummy_network.hpp" bodystart="18" bodyend="31"/>
    <listofallmembers>
      <member refid="classsk_1_1AbstractNetwork_1a06590ab1a7ac31342053470779950fc3" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>AbstractNetwork</name></member>
      <member refid="classsk_1_1AbstractNetwork_1af6084afe4ec81c032314ed535ec1d278" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>AbstractNetwork</name></member>
      <member refid="classsk_1_1AbstractNetwork_1ab47775aaf5b658bfab4b21c82027eb65" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>AbstractNetwork</name></member>
      <member refid="classsk_1_1DummyNetwork_1a09ae867375c25632131a2b7708e83b19" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>DummyNetwork</name></member>
      <member refid="classsk_1_1DummyNetwork_1a858d7f6e659e0d2fd95297d8466def44" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>DummyNetwork</name></member>
      <member refid="classsk_1_1DummyNetwork_1a9221488b2d5f34713e685423eb975022" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>DummyNetwork</name></member>
      <member refid="classsk_1_1DummyNetwork_1a4f79df7ffb2c6b259ca37330d5c05f9e" prot="public" virt="virtual"><scope>sk::DummyNetwork</scope><name>getSocket</name></member>
      <member refid="classsk_1_1DummyNetwork_1a499259093e0e0826adcdbede89c885c3" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>operator=</name></member>
      <member refid="classsk_1_1DummyNetwork_1a6d0543c6bc787cea094fcb03f1404e76" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>operator=</name></member>
      <member refid="classsk_1_1AbstractNetwork_1a3c0471fe9960cd1f17fe97545e83e37b" prot="public" virt="non-virtual" ambiguityscope="sk::AbstractNetwork::"><scope>sk::DummyNetwork</scope><name>operator=</name></member>
      <member refid="classsk_1_1AbstractNetwork_1abe3063c7d02d0b7effcbd5bd9636623e" prot="public" virt="non-virtual" ambiguityscope="sk::AbstractNetwork::"><scope>sk::DummyNetwork</scope><name>operator=</name></member>
      <member refid="classsk_1_1AbstractNetwork_1aa67072651a63d579edfb7dd37ed7706e" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>receivedMessage</name></member>
      <member refid="classsk_1_1AbstractNetwork_1a08724481a31f19c2a0d9a3f2b6f28949" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendChangeColor</name></member>
      <member refid="classsk_1_1AbstractNetwork_1acc252fcb7296f122996aabfcc65e4f08" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendChangeWidth</name></member>
      <member refid="classsk_1_1AbstractNetwork_1a564a4e0b753e90a611ad0eb1fc4f2183" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendDrawAt</name></member>
      <member refid="classsk_1_1AbstractNetwork_1afb343f19c09e59903a94227bcc3633b9" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendMouseReleased</name></member>
      <member refid="classsk_1_1AbstractNetwork_1a10dd052c2fc4a9f2186e61564f7ab96b" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendRedo</name></member>
      <member refid="classsk_1_1AbstractNetwork_1a6ace5669328450589d8599eaf65fe3a6" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendToBrush</name></member>
      <member refid="classsk_1_1AbstractNetwork_1ace7f8649f35152cbd614d5726c6a65b1" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendToPen</name></member>
      <member refid="classsk_1_1AbstractNetwork_1a9fb587a700c2c0a984371b980b1a4c85" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>sendUndo</name></member>
      <member refid="classsk_1_1AbstractNetwork_1aaa2948b36b6294ba458599e8e16c25be" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>~AbstractNetwork</name></member>
      <member refid="classsk_1_1DummyNetwork_1a9d07f4d6d0617198957124c757a11321" prot="public" virt="non-virtual"><scope>sk::DummyNetwork</scope><name>~DummyNetwork</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
