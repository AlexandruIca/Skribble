<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsk_1_1Canvas" kind="class" language="C++" prot="public">
    <compoundname>sk::Canvas</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QQuickPaintedItem</basecompoundref>
    <includes refid="canvas_8hpp" local="no">canvas.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsk_1_1Canvas_1a5141156d862b0680dbf33faaa49a85c3" prot="private" static="no" mutable="no">
        <type><ref refid="classsk_1_1DrawHistory" kindref="compound">DrawHistory</ref></type>
        <definition>DrawHistory sk::Canvas::m_history</definition>
        <argsstring></argsstring>
        <name>m_history</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="43" column="17" bodyfile="src/canvas.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsk_1_1Canvas_1a398606556a95b3b4f0ecfa3c36a729b3" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classsk_1_1DrawMode" kindref="compound">DrawMode</ref> &gt;</type>
        <definition>std::unique_ptr&lt;DrawMode&gt; sk::Canvas::m_drawMode</definition>
        <argsstring></argsstring>
        <name>m_drawMode</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="44" column="21" bodyfile="src/canvas.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsk_1_1Canvas_1aff8b7769d24f1aa864cd3f59f62e026c" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classsk_1_1AbstractNetwork" kindref="compound">AbstractNetwork</ref> &gt;</type>
        <definition>std::unique_ptr&lt;AbstractNetwork&gt; sk::Canvas::m_network</definition>
        <argsstring></argsstring>
        <name>m_network</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="45" column="21" bodyfile="src/canvas.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsk_1_1Canvas_1a7ac9d0a655870875679c523c7325201d" prot="private" static="no" mutable="no">
        <type>QColor</type>
        <definition>QColor sk::Canvas::m_foreignColor</definition>
        <argsstring></argsstring>
        <name>m_foreignColor</name>
        <initializer>{ <ref refid="classsk_1_1DrawMode_1aecc927c328cc254d373d7342ed26b760" kindref="member">DrawMode::getDefaultColor</ref>() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="47" column="12" bodyfile="src/canvas.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsk_1_1Canvas_1a60691ad5606cd03732e3d2657bcd2960" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int sk::Canvas::m_foreignWidth</definition>
        <argsstring></argsstring>
        <name>m_foreignWidth</name>
        <initializer>{ <ref refid="classsk_1_1DrawMode_1add2957ccf11b3ff56ff1980f87f83a87" kindref="member">DrawMode::getDefaultWidth</ref>() }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="48" column="9" bodyfile="src/canvas.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsk_1_1Canvas_1a0ac0c1a6f3dcbe47b1eb9e9abcd2fcb3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>sk::Canvas::Canvas</definition>
        <argsstring>(QQuickPaintedItem *parent=nullptr)</argsstring>
        <name>Canvas</name>
        <param>
          <type>QQuickPaintedItem *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="51" column="14" bodyfile="src/canvas.cpp" bodystart="15" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1Canvas_1a7dbda2861f2308d7459c89fcaa871ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sk::Canvas::Canvas</definition>
        <argsstring>(Canvas const &amp;)=delete</argsstring>
        <name>Canvas</name>
        <param>
          <type><ref refid="classsk_1_1Canvas" kindref="compound">Canvas</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1Canvas_1ad7043e7a829c3649710cabe2f3fcdec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sk::Canvas::Canvas</definition>
        <argsstring>(Canvas &amp;&amp;)=delete</argsstring>
        <name>Canvas</name>
        <param>
          <type><ref refid="classsk_1_1Canvas" kindref="compound">Canvas</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1Canvas_1af53d8f2d5f2d1071227e317b746a786a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>sk::Canvas::~Canvas</definition>
        <argsstring>() noexcept override=default</argsstring>
        <name>~Canvas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1Canvas_1a5ad0aac1ef4d57f21e2df0ae41aaf499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto sk::Canvas::operator=</definition>
        <argsstring>(Canvas const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsk_1_1Canvas" kindref="compound">Canvas</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1Canvas_1a94178ad83d9c8513090cc780d9392bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto sk::Canvas::operator=</definition>
        <argsstring>(Canvas &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classsk_1_1Canvas" kindref="compound">Canvas</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classsk_1_1Canvas_1ac71b58c38daf3758fb7a76e2c871b18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto sk::Canvas::paint</definition>
        <argsstring>(QPainter *painter) -&gt; void override</argsstring>
        <name>paint</name>
        <param>
          <type>QPainter *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the canvas. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="62" column="10" bodyfile="src/canvas.cpp" bodystart="33" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-slot">
      <memberdef kind="slot" id="classsk_1_1Canvas_1a1be26e4b649b3aa4b5dcee4107dc1ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::mousePositionChanged</definition>
        <argsstring>(QPoint const &amp;pos)</argsstring>
        <name>mousePositionChanged</name>
        <param>
          <type>QPoint const &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This triggers a paint event on the canvas. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="68" column="10" bodyfile="src/canvas.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="slot" id="classsk_1_1Canvas_1a8674725f3dfb5dfc91fb7f5472648bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::mouseReleased</definition>
        <argsstring>()</argsstring>
        <name>mouseReleased</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This triggers &apos;creating a new layer&apos; event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="72" column="10" bodyfile="src/canvas.cpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="slot" id="classsk_1_1Canvas_1ad48e61004869109d9c12461973e2b1b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::undo</definition>
        <argsstring>()</argsstring>
        <name>undo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This goes back to the previously stored layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="76" column="10" bodyfile="src/canvas.cpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="slot" id="classsk_1_1Canvas_1ad4c3b4502ee515a39fa8a8b19a45956e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::redo</definition>
        <argsstring>()</argsstring>
        <name>redo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opposite of <ref refid="classsk_1_1Canvas_1ad48e61004869109d9c12461973e2b1b8" kindref="member">undo</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="80" column="10" bodyfile="src/canvas.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="slot" id="classsk_1_1Canvas_1aa3ee532a2d61666264f6ce66fcfc4cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::onReceivedMessage</definition>
        <argsstring>(QString const &amp;msg)</argsstring>
        <name>onReceivedMessage</name>
        <param>
          <type>QString const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when a message through the network is received. Also handles the actual events that were received. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="85" column="10" bodyfile="src/canvas.cpp" bodystart="60" bodyend="116"/>
      </memberdef>
      <memberdef kind="slot" id="classsk_1_1Canvas_1abf6491525faaec1e17054c33fc6eda5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::changeColor</definition>
        <argsstring>(QColor const &amp;color)</argsstring>
        <name>changeColor</name>
        <param>
          <type>QColor const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the color of the pen/brush to draw with. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="89" column="10" bodyfile="src/canvas.cpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="slot" id="classsk_1_1Canvas_1a918baefaa1368fa49147c16e6e8cfa7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>auto sk::Canvas::changeWidth</definition>
        <argsstring>(const int width)</argsstring>
        <name>changeWidth</name>
        <param>
          <type>const int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the size of the brush/pen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/canvas.hpp" line="93" column="10" bodyfile="src/canvas.cpp" bodystart="124" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class where all the magic happens. </para>
    </briefdescription>
    <detaileddescription>
<para>This contains all behaviour related to painting itself.</para>
<para>All of <ref refid="classsk_1_1Canvas_1a1be26e4b649b3aa4b5dcee4107dc1ff9" kindref="member">mousePositionChanged</ref>, <ref refid="classsk_1_1Canvas_1a8674725f3dfb5dfc91fb7f5472648bb2" kindref="member">mouseReleased</ref>, <ref refid="classsk_1_1Canvas_1ad48e61004869109d9c12461973e2b1b8" kindref="member">undo</ref>, <ref refid="classsk_1_1Canvas_1ad4c3b4502ee515a39fa8a8b19a45956e" kindref="member">redo</ref>, <ref refid="classsk_1_1Canvas_1abf6491525faaec1e17054c33fc6eda5a" kindref="member">changeColor</ref>, <ref refid="classsk_1_1Canvas_1a918baefaa1368fa49147c16e6e8cfa7d" kindref="member">changeWidth</ref> are signals that other than modifying the local canvas accordingly, they also send the event over the network to the other user. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>sk::Canvas</label>
        <link refid="classsk_1_1Canvas"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QQuickPaintedItem</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>sk::Canvas</label>
        <link refid="classsk_1_1Canvas"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QQuickPaintedItem</label>
      </node>
    </collaborationgraph>
    <location file="src/canvas.hpp" line="39" column="1" bodyfile="src/canvas.hpp" bodystart="38" bodyend="94"/>
    <listofallmembers>
      <member refid="classsk_1_1Canvas_1a0ac0c1a6f3dcbe47b1eb9e9abcd2fcb3" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>Canvas</name></member>
      <member refid="classsk_1_1Canvas_1a7dbda2861f2308d7459c89fcaa871ade" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>Canvas</name></member>
      <member refid="classsk_1_1Canvas_1ad7043e7a829c3649710cabe2f3fcdec3" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>Canvas</name></member>
      <member refid="classsk_1_1Canvas_1abf6491525faaec1e17054c33fc6eda5a" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>changeColor</name></member>
      <member refid="classsk_1_1Canvas_1a918baefaa1368fa49147c16e6e8cfa7d" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>changeWidth</name></member>
      <member refid="classsk_1_1Canvas_1a398606556a95b3b4f0ecfa3c36a729b3" prot="private" virt="non-virtual"><scope>sk::Canvas</scope><name>m_drawMode</name></member>
      <member refid="classsk_1_1Canvas_1a7ac9d0a655870875679c523c7325201d" prot="private" virt="non-virtual"><scope>sk::Canvas</scope><name>m_foreignColor</name></member>
      <member refid="classsk_1_1Canvas_1a60691ad5606cd03732e3d2657bcd2960" prot="private" virt="non-virtual"><scope>sk::Canvas</scope><name>m_foreignWidth</name></member>
      <member refid="classsk_1_1Canvas_1a5141156d862b0680dbf33faaa49a85c3" prot="private" virt="non-virtual"><scope>sk::Canvas</scope><name>m_history</name></member>
      <member refid="classsk_1_1Canvas_1aff8b7769d24f1aa864cd3f59f62e026c" prot="private" virt="non-virtual"><scope>sk::Canvas</scope><name>m_network</name></member>
      <member refid="classsk_1_1Canvas_1a1be26e4b649b3aa4b5dcee4107dc1ff9" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>mousePositionChanged</name></member>
      <member refid="classsk_1_1Canvas_1a8674725f3dfb5dfc91fb7f5472648bb2" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>mouseReleased</name></member>
      <member refid="classsk_1_1Canvas_1aa3ee532a2d61666264f6ce66fcfc4cfb" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>onReceivedMessage</name></member>
      <member refid="classsk_1_1Canvas_1a5ad0aac1ef4d57f21e2df0ae41aaf499" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>operator=</name></member>
      <member refid="classsk_1_1Canvas_1a94178ad83d9c8513090cc780d9392bec" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>operator=</name></member>
      <member refid="classsk_1_1Canvas_1ac71b58c38daf3758fb7a76e2c871b18c" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>paint</name></member>
      <member refid="classsk_1_1Canvas_1ad4c3b4502ee515a39fa8a8b19a45956e" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>redo</name></member>
      <member refid="classsk_1_1Canvas_1ad48e61004869109d9c12461973e2b1b8" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>undo</name></member>
      <member refid="classsk_1_1Canvas_1af53d8f2d5f2d1071227e317b746a786a" prot="public" virt="non-virtual"><scope>sk::Canvas</scope><name>~Canvas</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
